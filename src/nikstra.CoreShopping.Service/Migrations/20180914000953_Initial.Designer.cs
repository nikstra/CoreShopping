// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using nikstra.CoreShopping.Service.Data;

namespace nikstra.CoreShopping.Service.Migrations
{
    [DbContext(typeof(UserDbContext))]
    [Migration("20180914000953_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.3-rtm-32065")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("ShopRoles","CoreShopping");
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopRoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.Property<string>("ShopRoleId");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.HasIndex("ShopRoleId");

                    b.ToTable("ShopRoleClaims","CoreShopping");
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("ShopUsers","CoreShopping");
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopUserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("ShopUserId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("ShopUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ShopUserClaims","CoreShopping");
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopUserLogin", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("ShopUserId");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("ShopUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ShopUserLogins","CoreShopping");
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopUserRole", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.Property<string>("ShopRoleId1");

                    b.Property<string>("ShopUserId1");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.HasIndex("ShopRoleId1");

                    b.HasIndex("ShopUserId1");

                    b.ToTable("ShopUserRoles","CoreShopping");
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopUserToken", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("UserId");

                    b.Property<string>("ShopUserId");

                    b.Property<string>("Value");

                    b.HasKey("LoginProvider", "Name", "UserId");

                    b.HasIndex("ShopUserId");

                    b.HasIndex("UserId");

                    b.ToTable("ShopUserTokens","CoreShopping");
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopRoleClaim", b =>
                {
                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopRole")
                        .WithMany("Claims")
                        .HasForeignKey("ShopRoleId");
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopUserClaim", b =>
                {
                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopUser")
                        .WithMany("Claims")
                        .HasForeignKey("ShopUserId");

                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopUserLogin", b =>
                {
                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopUser")
                        .WithMany("Logins")
                        .HasForeignKey("ShopUserId");

                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopUserRole", b =>
                {
                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopRole")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopRole", "ShopRole")
                        .WithMany()
                        .HasForeignKey("ShopRoleId1");

                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopUser", "ShopUser")
                        .WithMany()
                        .HasForeignKey("ShopUserId1");

                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopUser")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("nikstra.CoreShopping.Service.Models.ShopUserToken", b =>
                {
                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopUser")
                        .WithMany("Tokens")
                        .HasForeignKey("ShopUserId");

                    b.HasOne("nikstra.CoreShopping.Service.Models.ShopUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
